global
    log stdout format raw daemon "${LOG_LEVEL}"

    #pidfile /var/lib/haproxy/haproxy.pid
    maxconn 4000

    ## Turn on stats unix socket
    #server-state-file /var/lib/haproxy/server-state

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option http-server-close
    option redispatch
    retries 3
    timeout http-request 10s
    timeout queue 1m
    timeout connect 10s
    timeout client 10m
    timeout server 10m
    timeout http-keep-alive 10s
    timeout check 10s
    maxconn 3000

    ## TODO: Allow seamless reloads
    # load-server-state-from-file global

    # Use provided example error pages
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

backend dockerbackend
    server dockersocket $SOCKET_PATH

backend docker-events
    server dockersocket $SOCKET_PATH
    timeout server 1s
    timeout connect 1s

frontend dockerfrontend
    bind :2375
    http-request deny unless METH_GET || { env(POST) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/containers/[a-zA-Z0-9_.-]+/((stop)|(restart)|(kill)) } { env(ALLOW_RESTARTS) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/containers/[a-zA-Z0-9_.-]+/start } { env(ALLOW_START) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/containers/[a-zA-Z0-9_.-]+/stop } { env(ALLOW_STOP) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/auth } { env(AUTH) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/build } { env(BUILD) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/commit } { env(COMMIT) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/configs } { env(CONFIGS) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/containers } { env(CONTAINERS) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/distribution } { env(DISTRIBUTION) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/events } { env(EVENTS) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/exec } { env(EXEC) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/grpc } { env(GRPC) -m bool }

    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/images/load } { env(IMAGES_LOAD) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/images/pull } { env(IMAGES_PULL) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/images/pull } { urlp(policy) -m str -i never } { env(IMAGES) -m bool }
    http-request deny if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/images/pull }
    http-request deny if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/images/load }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/images } { env(IMAGES) -m bool }


    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/info } { env(INFO) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/networks } { env(NETWORKS) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/nodes } { env(NODES) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/_ping } { env(PING) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/plugins } { env(PLUGINS) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/secrets } { env(SECRETS) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/services } { env(SERVICES) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/session } { env(SESSION) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/swarm } { env(SWARM) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/system } { env(SYSTEM) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/tasks } { env(TASKS) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/version } { env(VERSION) -m bool }
    http-request allow if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/volumes } { env(VOLUMES) -m bool }
    http-request deny
    default_backend dockerbackend

    use_backend docker-events if { path,url_dec -m reg -i ^(/v[\d\.]+)?(/libpod)?/events }
